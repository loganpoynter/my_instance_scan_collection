<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_script_only_check">
    <scan_script_only_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>security</category>
        <description>When the system property "com.glide.security.protected_table.enabled" is set to "true", The Protected Tables plugin will be utilized to prevent higher privilege users on an instance from tampering with log tables. The following logging tables will have special protections when this property is set to 'true':&#13;
&#13;
syslog (config not modifiable)&#13;
syslog_transaction&#13;
sys_outbound_http_log&#13;
sysevent&#13;
sys_audit&#13;
sys_push_notification&#13;
protected_table_configuration (config not modifiable)&#13;
&#13;
The integrity of logs is important for determining malicious activity on an instance by a customer admin.</description>
        <documentation_url>https://docs.servicenow.com/csh?topicname=sc-enable-protected-tables-plugin.html&amp;version=latest</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>Extended Protection for Log Tables is not enabled</name>
        <priority>3</priority>
        <resolution_details>Make sure the system property "com.glide.security.protected_table.enabled" is set to "true"</resolution_details>
        <run_condition>gs.getProperty('scan_script_only_check_cd50de75972fb590b05bb08fe153af3b','')==''</run_condition>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function(engine) {
      
	var _strPropertyName = 'com.glide.security.protected_table.enabled';
	var _grProperty      = new GlideRecord('sys_properties');
	var _hasFinding      = true;
	
	if (_grProperty.get('name', _strPropertyName)) {		
		var _strPropertyType  = String(_grProperty.getValue('type') || '').toLowerCase().trim();
		var _strPropertyValue = String(_grProperty.getValue('value') || '').toLowerCase().trim();
		
		_hasFinding = 
			!(_strPropertyType == 'boolean' || _strPropertyType == 'string') || 
			_strPropertyValue !== 'true';
	}
	else {
		engine.finding.setValue(
			'finding_details', 
			'System Property "' + _strPropertyName + '" does not exist'
		);
	}
		
	if (_hasFinding) {
		if (_grProperty.isValidRecord()) {
			engine.finding.setCurrentSource(_grProperty);
		}
		
		engine.finding.increment();		
	}
	
})(engine);
]]></script>
        <short_description>Extended Protection for Log Tables is not enabled</short_description>
        <sys_class_name>scan_script_only_check</sys_class_name>
        <sys_created_by>maik.skoddow</sys_created_by>
        <sys_created_on>2024-01-06 04:56:13</sys_created_on>
        <sys_id>cd50de75972fb590b05bb08fe153af3b</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Extended Protection for Log Tables is not enabled</sys_name>
        <sys_package display_value="My Instance Scan Collection" source="7070d37c530b75d407f7f2a5a52d9ef6">7070d37c530b75d407f7f2a5a52d9ef6</sys_package>
        <sys_policy/>
        <sys_scope display_value="My Instance Scan Collection">7070d37c530b75d407f7f2a5a52d9ef6</sys_scope>
        <sys_update_name>scan_script_only_check_cd50de75972fb590b05bb08fe153af3b</sys_update_name>
        <sys_updated_by>maik.skoddow</sys_updated_by>
        <sys_updated_on>2024-01-14 14:35:19</sys_updated_on>
    </scan_script_only_check>
    <sys_translated_text action="delete_multiple" query="documentkey=cd50de75972fb590b05bb08fe153af3b"/>
</record_update>
