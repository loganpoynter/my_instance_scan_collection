<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_linter_check">
    <scan_linter_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>performance</category>
        <description>The "gs.log()", "gs.debug()", "console.log()", etc. statements can be used to write information to the system log, while the "gs.print()", etc. statements also sends it as output to the screen. It is generally used when debugging. Using "gs.log()", "gs.debug()", "console.log()", etc. statements on a production instance will pollute the system log, while it is never used as you do not perform debugging on a production instance.</description>
        <documentation_url>https://developer.servicenow.com/dev.do#!/guides/latest/now-platform/tpb-guide/debugging_best_practices</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>Scripts with debugging statements on PROD</name>
        <priority>3</priority>
        <resolution_details>The best practice is to remove (commented) debug statements from scripts or making them conditionally controlled by a property.

</resolution_details>
        <run_condition>gs.getProperty('scan_linter_check_fbf308331ba7f010ef13a9b4bd4bcbd5','')=='' &amp;&amp; gs.getProperty('sn_appclient.instance_type') == 'production'</run_condition>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function(engine) {

	//only include customized artifacts as we cannot take care of OOTB artifacts
	var _grArtifact = new GlideRecord('sys_metadata');

	_grArtifact.addQuery('sys_id', engine.current.getUniqueValue());
	_grArtifact.setLimit(1);
	_grArtifact.query();

	if (new global.UpdateVersionAPI().getCustomerFileIds(_grArtifact).length == 0) {
		return;
	}


	//don't continue if current table is on the exclusion list
	var _strPropertyName     = 'my_instance_scan_collection.table_exclusion_list';
	var _strExcludedTables   = String(gs.getProperty(_strPropertyName, '')).trim();

	if (_strExcludedTables.length > 0) {
		var _arrExcludedTables      = _strExcludedTables.split(',');
		var _arrFinalExcludedTables = [];

		for (var _numIndex = 0; _numIndex < _arrExcludedTables.length; _numIndex++) {
			var _strExcludedTableName = _arrExcludedTables[_numIndex].trim();

			if (_strExcludedTableName.length > 0) {
				if (gs.tableExists(_strExcludedTableName)) {
					_arrFinalExcludedTables.push(_strExcludedTableName);
				}
			}				
		}

		if (_arrFinalExcludedTables.length > 0) {
			if (_arrFinalExcludedTables.indexOf(engine.current.getTableName()) !== -1) {
				return;
			}
		}		
	}
	

	engine.rootNode.visit(function(node) {
		// gs.log, gs.info, gs.debug, gs.print
		if (node.getTypeName() === "GETPROP") {
			var gs_found     = false;
			var method_found = false;

			node.visit(function(childnode) {
				if (childnode.getTypeName() !== "NAME") {
					return;
				}

				if (childnode.getNameIdentifier() === "log" || 
					childnode.getNameIdentifier() === "info" || 
					childnode.getNameIdentifier() === "debug" || 
					childnode.getNameIdentifier() === "print") {
					
					method_found = true;
					return;
				}

				if (childnode.getNameIdentifier() === "gs") {
					gs_found = true;
				}
			});

			// Create scan finding
			if (gs_found && method_found) {
				engine.finding.incrementWithNode(node);
			}
		}
		
		// console.log
		if (node.getTypeName() === "GETPROP") {
			var console_found = false;
			var log_found = false;

			node.visit(function(childnode) {
				if (childnode.getTypeName() !== "NAME") {
					return;
				}

				if (childnode.getNameIdentifier() === "log") {
					log_found = true;
					return;
				}

				if (childnode.getNameIdentifier() === "console") {
					console_found = true;
				}
			});

			// Create scan finding
			if (console_found && log_found) {
				engine.finding.incrementWithNode(node);
			}
		}
		
		// jslog
		if (node.getNameIdentifier() && 
			node.getTypeName() === 'NAME' && 
			node.getNameIdentifier() === 'jslog' && 
			node.getParent().getTypeName() === 'CALL') {
			
			engine.finding.incrementWithNode(node);
		}
	});

})(engine);]]></script>
        <short_description>Scripts with debugging statements on PROD</short_description>
        <sys_class_name>scan_linter_check</sys_class_name>
        <sys_created_by>maik.skoddow</sys_created_by>
        <sys_created_on>2021-11-07 15:06:21</sys_created_on>
        <sys_id>fbf308331ba7f010ef13a9b4bd4bcbd5</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>Scripts with debugging statements on PROD</sys_name>
        <sys_package display_value="My Instance Scan Collection" source="7070d37c530b75d407f7f2a5a52d9ef6">7070d37c530b75d407f7f2a5a52d9ef6</sys_package>
        <sys_policy/>
        <sys_scope display_value="My Instance Scan Collection">7070d37c530b75d407f7f2a5a52d9ef6</sys_scope>
        <sys_update_name>scan_linter_check_fbf308331ba7f010ef13a9b4bd4bcbd5</sys_update_name>
        <sys_updated_by>maik.skoddow</sys_updated_by>
        <sys_updated_on>2025-02-22 02:52:58</sys_updated_on>
    </scan_linter_check>
    <sys_translated_text action="delete_multiple" query="documentkey=fbf308331ba7f010ef13a9b4bd4bcbd5"/>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>fbf308331ba7f010ef13a9b4bd4bcbd5</id>
        <sys_created_by>maik.skoddow</sys_created_by>
        <sys_created_on>2025-02-22 02:52:58</sys_created_on>
        <sys_id>cebca0fe83ff1210c1321429feaad35f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>maik.skoddow</sys_updated_by>
        <sys_updated_on>2025-02-22 02:52:58</sys_updated_on>
        <table>scan_linter_check</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
