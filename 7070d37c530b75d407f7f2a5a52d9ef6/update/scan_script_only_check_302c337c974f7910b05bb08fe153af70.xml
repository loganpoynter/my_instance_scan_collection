<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_script_only_check">
    <scan_script_only_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>security</category>
        <description> This check will identify password2 records whose encrypted text exceeds field length and uses short KMF Format.</description>
        <documentation_url>https://support.servicenow.com/kb?id=kb_article_view&amp;sysparm_article=KB1443041</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>Password2 Fields with short KMF format</name>
        <priority>2</priority>
        <resolution_details>Reduce the length of the password or increase the length of the password2 field and re-enter the values to mitigate the incompatibility issue.</resolution_details>
        <run_condition>gs.getProperty('scan_script_only_check_302c337c974f7910b05bb08fe153af70','')=='' &amp;&amp;(gs.getProperty('glide.password2.legacycode.disabled', 'false') == 'true' &amp;&amp; gs.getProperty('glide.password2.honor.attributes', 'true') == 'false')</run_condition>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {

	var _grDictionary = new GlideRecord('sys_dictionary');
	var _mapTable     = {};

	_grDictionary.addQuery('internal_type', 'password2');
	_grDictionary.addQuery('attributes', 'CONTAINS', 'is_fallback_module_encrypted=true');
	_grDictionary.query();


	while (_grDictionary.next()) {
		var _strTableName  = _grDictionary.getValue('name');
		var _strColumnName = _grDictionary.getValue('element');

		addToMap(_mapTable, _strTableName, _strColumnName);
	}

	for (var _strTable in _mapTable) {
		var _arrFieldNames = _mapTable[_strTable];
		var _grTable       = new GlideRecord(_strTable);

		if (!_grTable.isValid()) {
			continue;
		}
		
		_grTable.query();

		while (_grTable.next()) {
			for (var i = 0; i < _arrFieldNames.length; i++) {
				var _objColumnValue = _grTable.getValue(_arrFieldNames[i]);

				if (JSUtil.nil(_objColumnValue)) {
					continue;
				}
				if (_objColumnValue.startsWith('\uFDE3')) {
					finding.setCurrentSource(_grTable);
					finding.increment();
				}
			}
		}
	}

	function addToMap(object, key, value) {
		if (!object[key])
			object[key] = [value];
		else
			object[key].push(value);
	}
})(engine);]]></script>
        <short_description>Password2 Fields with short KMF format</short_description>
        <sys_class_name>scan_script_only_check</sys_class_name>
        <sys_created_by>maik.skoddow</sys_created_by>
        <sys_created_on>2023-12-09 13:41:56</sys_created_on>
        <sys_id>302c337c974f7910b05bb08fe153af70</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Password2 Fields with short KMF format</sys_name>
        <sys_package display_value="My Instance Scan Collection" source="7070d37c530b75d407f7f2a5a52d9ef6">7070d37c530b75d407f7f2a5a52d9ef6</sys_package>
        <sys_policy/>
        <sys_scope display_value="My Instance Scan Collection">7070d37c530b75d407f7f2a5a52d9ef6</sys_scope>
        <sys_update_name>scan_script_only_check_302c337c974f7910b05bb08fe153af70</sys_update_name>
        <sys_updated_by>maik.skoddow</sys_updated_by>
        <sys_updated_on>2024-01-14 11:47:31</sys_updated_on>
    </scan_script_only_check>
    <sys_translated_text action="delete_multiple" query="documentkey=302c337c974f7910b05bb08fe153af70"/>
</record_update>
