<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_script_only_check">
    <scan_script_only_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>security</category>
        <description>This property performs this authentication while importing data sources into the instance tables/pages.
It restricts any guest users who are currently accessing this data.  If "glide.basicauth.required.importprocessor" is not set to the recommended value of "true", then unauthenticated users could access import processor. Additional access controls, ie ACLs, are still enforced, but this value allows a guest user import request to be processed and not summarily denied.</description>
        <documentation_url>https://docs.servicenow.com/csh?version=latest&amp;topicname=import-request-authorization.html</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>Authorization for inbound Import Requests is not enabled</name>
        <priority>3</priority>
        <resolution_details>Ensure the property "glide.basicauth.required.importprocessor" is set to "true".</resolution_details>
        <run_condition>gs.getProperty('scan_script_only_check_d43840a71b32591058200fa7624bcb73','')==''</run_condition>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {

	var _strPropertyName = 'glide.basicauth.required.importprocessor';
	var _grProperty      = new GlideRecord('sys_properties');
	var _hasFinding      = true;

	if (_grProperty.get('name', _strPropertyName)) {		
		var _strPropertyType  = String(_grProperty.getValue('type') || '').toLowerCase().trim();
		var _strPropertyValue = String(_grProperty.getValue('value') || '').toLowerCase().trim();

		_hasFinding = 
			!(_strPropertyType == 'boolean' || _strPropertyType == 'string') || 
			_strPropertyValue !== 'true';
	}
	else {
		engine.finding.setValue(
			'finding_details', 
			'System Property "' + _strPropertyName + '" does not exist'
		);
	}

	if (_hasFinding) {
		if (_grProperty.isValidRecord()) {
			engine.finding.setCurrentSource(_grProperty);
		}

		engine.finding.increment();		
	}

})(engine);]]></script>
        <short_description>Authorization for inbound Import Requests is not enabled</short_description>
        <sys_class_name>scan_script_only_check</sys_class_name>
        <sys_created_by>maik.skoddow</sys_created_by>
        <sys_created_on>2022-11-02 06:21:25</sys_created_on>
        <sys_id>d43840a71b32591058200fa7624bcb73</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Authorization for inbound Import Requests is not enabled</sys_name>
        <sys_package display_value="My Instance Scan Collection" source="7070d37c530b75d407f7f2a5a52d9ef6">7070d37c530b75d407f7f2a5a52d9ef6</sys_package>
        <sys_policy/>
        <sys_scope display_value="My Instance Scan Collection">7070d37c530b75d407f7f2a5a52d9ef6</sys_scope>
        <sys_update_name>scan_script_only_check_d43840a71b32591058200fa7624bcb73</sys_update_name>
        <sys_updated_by>maik.skoddow</sys_updated_by>
        <sys_updated_on>2024-10-04 13:56:04</sys_updated_on>
    </scan_script_only_check>
    <sys_translated_text action="delete_multiple" query="documentkey=d43840a71b32591058200fa7624bcb73"/>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>d43840a71b32591058200fa7624bcb73</id>
        <sys_created_by>maik.skoddow</sys_created_by>
        <sys_created_on>2024-10-04 13:56:03</sys_created_on>
        <sys_id>a45cb82583c15210c1321429feaad3a0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>maik.skoddow</sys_updated_by>
        <sys_updated_on>2024-10-04 13:56:03</sys_updated_on>
        <table>scan_script_only_check</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
