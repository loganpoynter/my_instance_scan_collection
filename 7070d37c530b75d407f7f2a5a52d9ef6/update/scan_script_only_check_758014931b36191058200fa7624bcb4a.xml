<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_script_only_check">
    <scan_script_only_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>security</category>
        <description>Messaging within the glide scripting sandbox is used for logging purposes. Calling this unsanitized error function exposes the platform to reflected XSS attacks. XSS attacks can allow for easy privilege escalation by stealing someone's session cookies. If "glide.sandbox.usersession.allow_unsanitized_messages" is not set to the recommended value of "false", then the unsanitized error messaging functions "addErrorMessageNoSanitization" and "addInfoMessageNoSanitization" are available to script. </description>
        <documentation_url>https://docs.servicenow.com/csh?version=latest&amp;topicname=Access-GlideSystemUserSession-scriptable-API.html</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>Access to GlideSystemUserSession scriptable API</name>
        <priority>2</priority>
        <resolution_details>Ensure the property "glide.sandbox.usersession.allow_unsanitized_messages" is set to "false".</resolution_details>
        <run_condition>gs.getProperty('scan_script_only_check_758014931b36191058200fa7624bcb4a','')==''</run_condition>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {

	var _strPropertyName = 'glide.sandbox.usersession.allow_unsanitized_messages';
	var _grProperty      = new GlideRecord('sys_properties');
	var _hasFinding      = true;

	if (_grProperty.get('name', _strPropertyName)) {		
		var _strPropertyType  = String(_grProperty.getValue('type') || '').toLowerCase().trim();
		var _strPropertyValue = String(_grProperty.getValue('value') || '').toLowerCase().trim();

		_hasFinding = 
			!(_strPropertyType == 'boolean' || _strPropertyType == 'string') || 
			_strPropertyValue !== 'false';
	}
	else {
		engine.finding.setValue(
			'finding_details', 
			'System Property "' + _strPropertyName + '" does not exist'
		);
	}

	if (_hasFinding) {
		if (_grProperty.isValidRecord()) {
			engine.finding.setCurrentSource(_grProperty);
		}

		engine.finding.increment();		
	}
})(engine);]]></script>
        <short_description>Access to GlideSystemUserSession scriptable API</short_description>
        <sys_class_name>scan_script_only_check</sys_class_name>
        <sys_created_by>maik.skoddow</sys_created_by>
        <sys_created_on>2022-11-01 12:19:21</sys_created_on>
        <sys_id>758014931b36191058200fa7624bcb4a</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Access to GlideSystemUserSession scriptable API</sys_name>
        <sys_package display_value="My Instance Scan Collection" source="7070d37c530b75d407f7f2a5a52d9ef6">7070d37c530b75d407f7f2a5a52d9ef6</sys_package>
        <sys_policy/>
        <sys_scope display_value="My Instance Scan Collection">7070d37c530b75d407f7f2a5a52d9ef6</sys_scope>
        <sys_update_name>scan_script_only_check_758014931b36191058200fa7624bcb4a</sys_update_name>
        <sys_updated_by>maik.skoddow</sys_updated_by>
        <sys_updated_on>2024-10-04 13:37:37</sys_updated_on>
    </scan_script_only_check>
    <sys_translated_text action="delete_multiple" query="documentkey=758014931b36191058200fa7624bcb4a"/>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>758014931b36191058200fa7624bcb4a</id>
        <sys_created_by>maik.skoddow</sys_created_by>
        <sys_created_on>2024-10-04 13:37:36</sys_created_on>
        <sys_id>9218b06d83815210c1321429feaad35b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>maik.skoddow</sys_updated_by>
        <sys_updated_on>2024-10-04 13:37:36</sys_updated_on>
        <table>scan_script_only_check</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
