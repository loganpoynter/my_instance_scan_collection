<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_script_only_check">
    <scan_script_only_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>security</category>
        <description>Active session timeouts are a feature to ensure that a hijacked session cannot be used indefinitely without providing authentication information. System property "glide.active.session.timeout.exception.roles" controls the roles that are exempted from an active session timeout limit. It is best practice to only consider an active session timeout limit exception for internal integration account roles. If a role is given an exception to the session timeout, and that role is given to a user who is the victim of a session hijacking attack, an attacker can continue to authenticate to that session indefinitely. This may increase the affected scope of a security incident by allowing an attacker more time to make use of a hijacked account.</description>
        <documentation_url>https://docs.servicenow.com/csh?topicname=sc-define-active-session-timeout-exception-roles.html&amp;version=latest</documentation_url>
        <finding_type>scan_finding</finding_type>
        <name>Unexpected Roles for the Active Session Timeout Exception</name>
        <priority>3</priority>
        <resolution_details>Ensure system property "glide.active.session.timeout.exception.roles" is set to value "edge_encryption,mid_server".</resolution_details>
        <run_condition>gs.getProperty('scan_script_only_check_b88af44d6b5335907608fb893c63fb50','')==''</run_condition>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function(engine) {

	var _strPropertyName = 'glide.active.session.timeout.exception.roles';
	var _grProperty      = new GlideRecord('sys_properties');
	var _hasFinding      = false;
	
	if (_grProperty.get('name', _strPropertyName)) {		
		var _strPropertyType  = String(_grProperty.getValue('type') || '').toLowerCase().trim();
		var _strPropertyValue = String(_grProperty.getValue('value') || '').toLowerCase().trim();
		
		_hasFinding = _strPropertyType !== 'string' || _strPropertyValue !== 'edge_encryption,mid_server';
	}

	
	if (_hasFinding) {
		if (_grProperty.isValidRecord()) {
			engine.finding.setCurrentSource(_grProperty);
		}
		
		engine.finding.increment();		
	}
	
})(engine);]]></script>
        <short_description>Unexpected Roles for the Active Session Timeout Exception</short_description>
        <sys_class_name>scan_script_only_check</sys_class_name>
        <sys_created_by>maik.skoddow</sys_created_by>
        <sys_created_on>2023-12-22 04:30:09</sys_created_on>
        <sys_id>b88af44d6b5335907608fb893c63fb50</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>Unexpected Roles for the Active Session Timeout Exception</sys_name>
        <sys_package display_value="My Instance Scan Collection" source="7070d37c530b75d407f7f2a5a52d9ef6">7070d37c530b75d407f7f2a5a52d9ef6</sys_package>
        <sys_policy/>
        <sys_scope display_value="My Instance Scan Collection">7070d37c530b75d407f7f2a5a52d9ef6</sys_scope>
        <sys_update_name>scan_script_only_check_b88af44d6b5335907608fb893c63fb50</sys_update_name>
        <sys_updated_by>maik.skoddow</sys_updated_by>
        <sys_updated_on>2024-01-15 08:22:45</sys_updated_on>
    </scan_script_only_check>
    <sys_translated_text action="delete_multiple" query="documentkey=b88af44d6b5335907608fb893c63fb50"/>
</record_update>
